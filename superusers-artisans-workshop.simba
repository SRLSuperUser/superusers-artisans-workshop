program superusers_artisans_workshop;

{**
 * Copyright (c) 2014 SuperUser.
 *
 *}

{$define SMART}
{$i srl-6/srl.simba}
{$i srl-6/lib/misc/srlplayerform.simba}
{$i sps/lib/sps-rs3.simba}

{$define _DEBUG_SURFACES}

const
  CFG_SHOW_SRL_DEBUG = 0;
  CFG_IGNOT_TYPE = 1;
  CFG_IGNOT_TIER = 2;

type
  TSurfacePartFilterFunc = function (
    const atpa: T2DPointArray;
    const p_: TPoint;
    out index: integer
  ): TPoint;

  TSurfacePart = record
    bounds,
    size: TBox;
    color_settings: TColorSettings;
    color_tolerance,
    color,
    step,
    max_distance,
    min_pixel_count: integer;
    anti: boolean;
    p: TPoint;
    base_atpa: T2DPointArray;
  end

  TSurfacePartArray = array of ^TSurfacePart;

  TSurfaceObject = record
    name: string;
    parts: TSurfacePartArray;
    bounds: TBox;
    filter: TSurfacePartFilterFunc;
  end

  TIgnot = record
    type_: string;
    tier,
    smithed,
    inventory_item_dtm: integer;
    base_xp: extended;
  end

  TIgnotArray = array of ^TIgnot;

  TStatistics = record
    ignot: ^TIgnot;
    level,
    xp_start: integer;
    canvas: TMufasaBitmap;
    canvas_location: TPoint;
    bounds: TBox;
    last_update: TTimeMarker;
  end

var
  statistics: TStatistics;
  ignots: TIgnotArray;
  ignot: ^TIgnot = nil;
  chute, anvil, smelter: TSurfaceObject;

procedure TMufasaBitmap.Print(
  const s: string;
  col,
  row: integer;
  color: TColor = clWhite;
  col_offset: integer = 100
)
begin
  if col = 1 then
    col_offset := 110;

  self.DrawClippedText(
    s,
    [4 + col * col_offset, 42 + row * 15],
    'statChars',
    true,
    color
  );
end

procedure TStatistics.Update()
var
  b: TMufasaBitmap;
  tr: integer;
begin
  if self.last_update.GetTime() < 1000 then
    Exit();

  self.last_update.Start();

  b := GetMufasaBitmap(CopyBitmap(self.canvas.getIndex()));
  tr := GetTimeRunning();

  b.Print('Time running', 0, 0);
  b.Print(Copy(MSToTime(tr, TIME_BARE), 0, 5), 1, 0, clYellow);

  smartImage.drawBitmap(b.getIndex(), self.canvas_location);

  b.Free();
end

procedure TStatistics.Initialize()
begin
  with actionBar.GetBounds() do begin
    self.bounds.x1 := 0;
    self.bounds.x2 := x2;
    self.bounds.y1 := 0;
    self.bounds.y2 := __smartClientHeight - y1;

    self.canvas.init(Client.GetMBitmaps);
    self.canvas.SetSize(self.bounds.x2 + 1, self.bounds.y2 + 1);

    self.canvas.Rectangle(self.bounds, $385385);
    self.canvas.Rectangle([0, 0, self.bounds.x2, 33], $21314e);
    self.canvas.DrawText(
      'SuperUser''s Artisan''s Workshop', Point(4, 2), BigChars, false, clWhite
    );

    with self.canvas_location do begin
      x := 0;
      y := y1;
    end
  end

  self.last_update.Start();
end

function TBox.FindColorsTPA(
  const tcs: TColorSettings;
  d, c, t: integer
): TPointArray
var
  tpa: TPointArray;
begin
  FindColorsTolerance(tpa, c, self, t, tcs);

  result := RemoveDistTPointArray(
    mainscreen.playerPoint.x,
    mainscreen.playerPoint.y,
    d,
    RemoveDistTPointArray(
      mainscreen.playerPoint.x, mainscreen.playerPoint.y, 10, tpa, false
    ),
    true
  );
end

function TPointArray.AssertBoxSize(const size: TBox): boolean
begin
  result := true;

  with GetTPABounds(self) do
    if (x2 - x1 < size.x1) or
       (x2 - x1 > size.x2) or
       (y2 - y1 < size.y1) or
       (y2 - y1 > size.y2) then
      result := false;
end

procedure T2DPointArray.DeleteIndex(index: integer)
var
  i: integer;
begin
  for i := index to High(self) - 1 do
    self[i] := self[i + 1];

  SetLength(self, Length(self) - 1);
end

function SurfaceFilterClosest(
  const atpa: T2DPointArray;
  const p_: TPoint;
  out index: integer
): TPoint
var
  i: integer;
  p: TPoint;
  c, ch: extended;
begin
  ch := $ffff;

  for i := 0 to High(atpa) do begin
    p := MiddleTPA(atpa[i]);
    c := Sqrt(Sqr(Abs(p_.x - p.x)) + Sqr(Abs(p_.y - p.y)));

    if c < ch then begin
      ch := c;
      result := p;
      index := i;
    end
  end
end

function TSurfacePart.Find(
  const b: TBox;
  base: boolean = false;
  const f: TSurfacePartFilterFunc = @SurfaceFilterClosest
): boolean
var
  atpa, atpa_: T2DPointArray;
  i: integer;
begin
  result := false;
  atpa := SplitTPAEx(
    b.FindColorsTPA(
      self.color_settings,
      self.max_distance,
      self.color,
      self.color_tolerance
    ),
    self.step,
    self.step // TODO: Individual x/y -steps.
  );

  for i := 0 to High(atpa) do begin
    if atpa[i].AssertBoxSize(self.size) and
      (Length(atpa[i]) > self.min_pixel_count) then begin
      SetLength(atpa_, Length(atpa_) + 1);

      atpa_[High(atpa_)] := CopyTPA(atpa[i]);
    end else begin
      {$ifdef DEBUG_SURFACES}

      {$endif}
    end
  end

  if Length(atpa_) > 0 then begin
    if base then begin
      SetLength(self.base_atpa, 0);

      self.base_atpa := CopyATPA(atpa_);
    end else begin
      f(atpa_, mainscreen.playerPoint, i);

      self.bounds := GetTPABounds(atpa_[i]);
    end

    result := true;
  end
end

function TSurfacePartArray.Create(const csp: TSurfacePart = []): ^TSurfacePart
begin
  SetLength(self, Length(self) + 1);

  New(result);

  with result^ do begin
    base_atpa := csp.base_atpa;
    bounds := csp.bounds;
    color := csp.color;
    color_settings := csp.color_settings;
    color_tolerance := csp.color_tolerance;
    max_distance := csp.max_distance;
    min_pixel_count := csp.min_pixel_count;
    size := csp.size;
    step := csp.step;
    anti := csp.anti;
  end

  self[High(self)] := result;
end

function TSurfaceObject.Point(): TPoint
begin
  result := self.bounds.GetMiddle();
end

function TSurfaceObject.Find(
  const area: TBox;
  const f: TSurfacePartFilterFunc = nil
): boolean
var
  many_parts, b: boolean;
  i, k, j, mp: integer;
  o: TSurfacePartFilterFunc;
begin
  many_parts := Length(self.parts) > 1;
  result := true;
  mp := 0;

  if @f <> nil then begin
    o := @self.filter;
    self.filter := @f;
  end

  {$ifdef DEBUG_SURFACES}

  smartImage.clear();

  {$endif}

  for i := 0 to High(self.parts) do begin
    if i = 0 then
      result := self.parts[0]^.Find(area, many_parts, @self.filter)
    else begin
      if not result then begin
        if @f <> nil then
          self.filter := @o;

        Exit();
      end

      k := High(self.parts[0]^.base_atpa);

      for j := 0 to k do begin
        {$ifdef DEBUG_SURFACES}

        smartImage.drawBox(self.parts[0]^.base_atpa[j].GetBounds(), clRed);

        {$endif}

        b := self.parts[i]^.Find(
          GetTPABounds(self.parts[0]^.base_atpa[j]),
          false,
          @self.filter
        );

        if self.parts[i]^.anti then
          b := not b

        if not b then begin
          // Remove from potential hits.
          self.parts[0]^.base_atpa.DeleteIndex(j);

          Dec(k);
          Dec(j);
        end
      end
    end
  end

  if many_parts and (Length(self.parts[0]^.base_atpa) = 0) then begin
    if @f <> nil then
      self.filter := @o;

    Exit(false);
  end

  if many_parts then begin
    self.filter(self.parts[0]^.base_atpa, mainscreen.playerPoint, i);

    self.bounds := GetTPABounds(self.parts[0]^.base_atpa[i]);
  end else
    self.bounds := self.parts[0]^.bounds;

  {$ifdef DEBUG_SURFACES}

  for i := 0 to High(self.parts[0]^.base_atpa) do
    smartImage.drawBox(self.parts[0]^.base_atpa[i].GetBounds(), clYellow);

  {$endif}

  SetLength(self.parts[0]^.base_atpa, 0);

  if @f <> nil then
    self.filter := @o;
end

function TIgnot.CountInventory(): integer
begin
  result := tabBackpack.CountDTM(self.inventory_item_dtm);
end

function TIgnotArray.Create(
  const _type_: string = '';
  _tier: integer = 1;
  _base_xp: extended = 0
): ^TIgnot
begin
  SetLength(self, Length(self) + 1);

  New(result);

  with result^ do begin
    type_ := _type_;
    tier := _tier;
    base_xp := _base_xp;
  end

  self[High(self)] := result;
end

function TIgnotArray.Get(const type_: string; tier: integer): ^TIgnot
var
  i: integer;
begin
  for i := 0 to High(self) do
    if (self[i]^.type_ = type_) and (self[i]^.tier = tier) then
      Exit(self[i]);

  result := nil;
end

function MouseRandom(const p: TPoint; mouse_action: integer): TPoint
var
  mouse_style: array [0..2] of integer;
  x, y: integer;
begin
  mouse_style := [MOUSE_BREAK, MOUSE_ACCURATE, MOUSE_HUMAN];
  mouseSpeed := RandomRange(30, 38);

  if (mouse_action = MOUSE_MOVE) then
    MissMouse(p, true)
  else
    Mouse(p, mouse_action, mouse_style[Random(2)]);

  GetMousePos(x, y);

  result := TPoint([x, y]);
end

procedure TPlayer.Configure()
begin
  disableSRLDebug := not booleans[CFG_SHOW_SRL_DEBUG];
  ignot := ignots.Get(strings[CFG_IGNOT_TYPE], integers[CFG_IGNOT_TIER]);

  self.Login();

  minimap.clickCompass();

  MouseRandom(mainscreen.playerPoint, MOUSE_MOVE);

  mainscreen.setAngle(MS_ANGLE_HIGH);
  statistics.level := tabStats.GetSkillLevel(SKILL_SMITHING);
  statistics.xp_start := statistics.GetXp();
end

function TSurfaceObject.Click(
  tries: integer = 5;
  rotate: boolean = false
): boolean
begin
  result := false;

  if tries = 0 then
    Exit();

  if self.Find(mainscreen.GetBounds()) then begin
    MouseRandom(self.Point(), MOUSE_MOVE);

    if not IsMouseOverText(
      [self.name], RandomRange(800, 1000)
    ) then begin
      FastClick(MOUSE_RIGHT);

      result := chooseOption.Select([self.name]);
    end else begin
      FastClick(MOUSE_LEFT);

      result := true;
    end

    if result then
      minimap.WaitPlayerMoving();
  end

  if not result and rotate then begin
    minimap.setAngle(Random(360));

    Exit(self.Click(tries - 1, rotate));
  end
end

procedure Initialize()
var
  i, j: integer;
begin
  ClearDebug();
  AddOnTerminate('Uninitialize');

  with ignots.Create('Iron', 1, 101)^ do begin
    inventory_item_dtm := DTMFromString('mlwAAAHicY2dgYIhjYmCIBOJUIA4BYj8gToa' +
      'KbWFkYNgBxLuAeA8QHwLiI0C8H4gZGJiwYEaG5Lg4BlxAEqcMCgAA1UcJAQ==');
  end

  with chute do begin
    name := 'Chute';
    filter := @SurfaceFilterClosest;

    with parts.Create()^ do begin
      color_settings.CTS := 2;
      color_settings.modifier.hue := 0.00;
      color_settings.modifier.saturation := 2.41;
      color_tolerance := 1;
      filter := @SurfaceFilterClosest;
      color := 1118482;
      max_distance := 300;
      step := 16;
      min_pixel_count := 20;
      size.x1 := 6;
      size.x2 := 80;
      size.y1 := 6;
      size.y2 := 80;
      anti := false;
    end
  end

  with smelter do begin
    name := 'Smelter';
    filter := @SurfaceFilterClosest;

    with parts.Create()^ do begin
      color_settings.CTS := 2;
      color_settings.modifier.hue := 0.14;
      color_settings.modifier.saturation := 0.05;
      color_tolerance := 12;
      filter := @SurfaceFilterClosest;
      color := 2962236;
      max_distance := 300;
      step := 3;
      min_pixel_count := 10;
      size.x1 := 5;
      size.x2 := 140;
      size.y1 := 5;
      size.y2 := 140;
      anti := false;
    end

    with parts.Create()^ do begin
      color_settings.CTS := 2;
      color_settings.modifier.hue := 1.06;
      color_settings.modifier.saturation := 0.78;
      color_tolerance := 11;
      filter := @SurfaceFilterClosest;
      color := 9395548;
      max_distance := 300;
      step := 8;
      min_pixel_count := 8;
      size.x1 := 3;
      size.x2 := 300;
      size.y1 := 3;
      size.y2 := 300;
      anti := false;
    end
  end

  with anvil do begin
    name := 'Anvil';
    filter := @SurfaceFilterClosest;

    with parts.Create()^ do begin
      color_settings.CTS := 2;
      color_settings.modifier.hue := 0.27;
      color_settings.modifier.saturation := 0.27;
      color_tolerance := 4;
      filter := @SurfaceFilterClosest;
      color := 5266281;
      max_distance := 300;
      step := 16;
      min_pixel_count := 100;
      size.x1 := 10;
      size.x2 := 80;
      size.y1 := 10;
      size.y2 := 80;
      anti := false;
    end

    with parts.Create()^ do begin
      color_settings.CTS := 2;
      color_settings.modifier.hue := 0.09;
      color_settings.modifier.saturation := 0.10;
      color_tolerance := 4;
      filter := @SurfaceFilterClosest;
      color := 6451073;
      max_distance := 600;
      step := 16;
      min_pixel_count :=  30;
      size.x1 := 5;
      size.x2 := 400;
      size.y1 := 5;
      size.y2 := 400;
      anti := true;
    end

    with parts.Create()^ do begin
      color_settings.CTS := 3;
      color_settings.modifier.sensitivity := 1.00;
      color_tolerance := 5;
      filter := @SurfaceFilterClosest;
      color := 1579295;
      max_distance := 600;
      step := 16;
      min_pixel_count :=  10;
      size.x1 := 4;
      size.x2 := 400;
      size.y1 := 4;
      size.y2 := 400;
      anti := true;
    end
  end

  with playerform do begin
    name := 'SuperUser''s Artisans Workshop';
    scriptHelpThread := 'http://villavu.com/forum/showthread.php?t=';
    scriptSettingsPath := AppPath + 'Scripts/superusers-artisans-workshop.txt';

    comboBoxLabels := ['Ignot type', 'Ignot tier'];
    comboBoxDefaults := ['Iron', '1'];
    comboBoxItems := [['Iron'], ['1', '2', '3']];

    checkBoxLabels := ['Show SRL debug'];
    checkBoxDefaults := ['false'];
  end

  disableSRLDebug := true;
  currentPlayer := 0;
  smartPlugins := ['d3d9.dll'];
  smartEnableDrawing := true;

  RunPlayerForm();

  players.setup(playerForm.playerNames, playerForm.playerFile);

  SetupSRL();

  for i := 0 to high(players) do
    with players[i] do begin
      booleans[CFG_SHOW_SRL_DEBUG] := StrToBool(
        playerForm.players[i].settings[CFG_SHOW_SRL_DEBUG]
      );

      strings[CFG_IGNOT_TYPE] := playerForm.players[i].settings[CFG_IGNOT_TYPE];

      integers[CFG_IGNOT_TIER] := StrToInt(
        playerForm.players[i].settings[CFG_IGNOT_TIER]
      );

      // for j := 0 to High(playerForm.players[i].settings) do
      //   WriteLn(playerForm.players[i].settings[j]);
    end

  players[currentPlayer].Configure();

  statistics.Initialize();
  statistics.Update();
end

procedure Uninitialize()
var
  i: integer;
begin
  for i := 0 to High(ignots) do begin
    FreeDtm(ignots[i]^.inventory_item_dtm);
    FreeMem(ignots[i]);
  end
end

function GetCurrentInstructions(tries: integer = 5): string
begin
  if tries = 0 then begin
    WriteLn('Couldn''t get current instructions from Suak!');

    TerminateScript();
  end

  result := GetTextAtEx(260, 34, 322, 57, 1, 4, 1, 16777215, 10, statchars);

  case result of
    'Boots', 'Gauntlets', 'Chestplate', 'Helm': Exit();
  end

  Wait(RandomRange(200, 800));

  result := GetCurrentInstructions(tries - 1);
end

function TRSProductionScreen.Close(): boolean
var
  dtm_close, _x, _y: integer;
  t: TTimeMarker;
begin
  dtm_close := DTMFromString('mbQAAAHicY2VgYHjIysBwF4ifAvETIL4HxJ8ZGRjeQ/E3KP6zxZ' +
    'Th76UkMP4yUwKM+YH60TFOAABPDxMi');

  with mainscreen.GetBounds() do
    if FindDtm(dtm_close, _x, _y, x1, y1, x2, y2) then begin
      MouseRandom(Point(_x, _y), MOUSE_LEFT);

      t.Start();

      repeat
        if t.GetTime() > 5000 then
          break;

        Wait(RandomRange(33, 66));
      until not self.IsOpen();
    end

  result := not self.IsOpen();

  FreeDtm(dtm_close);
end

function SmithBurialArmour(ci: string = ''; tries: integer = 5): boolean;
var
  s: integer;
  t: TTimeMarker;
begin
  result := false;

  if tries = 0 then
    TerminateScript();

  if ignot^.CountInventory() = 0 then
    Exit(false);

  if not productionScreen.IsOpen() then begin
    ci := GetCurrentInstructions();

    if (not anvil.Click(5, true)) or (not productionScreen.isOpen(3000)) then
      Exit(SmithBurialArmour(ci, tries - 1));
  end else if ci = '' then begin
    productionScreen.Close();

    ci := GetCurrentInstructions();

    Exit(SmithBurialArmour(ci, tries));
  end

  case ci of
    'Helm': s := 1;
    'Boots': s := 2;
    'Gauntlets': s := 3;
    'Chestplate': s := 4;
  end

  if not productionScreen.SelectBox(s, [Copy(ci, 2)]) then
    Exit(SmithBurialArmour(ci, tries - 1));

  t.Start();

  repeat
    productionScreen.ClickStart(false);

    Wait(RandomRange(500, 1000));

    if t.GetTime() > 5000 then
      Exit(SmithBurialArmour(ci, tries - 1));
  until not productionScreen.IsOpen();

  if progressScreen.IsOpen(5000) then begin
    repeat
      statistics.Update();

      if (GetCurrentInstructions() <> ci) or
        (Pos(Copy(ci, 2, 3), progressScreen.GetItem()) < 1) then begin
        progressScreen.FindButton(PROGRESS_BUTTON_CANCEL, 4000, true);

        break;
      end

      Wait(RandomRange(33, 66));

      if ignot^.CountInventory() = 0 then begin
        progressScreen.FindButton(PROGRESS_BUTTON_DONE, 4000, true);

        break;
      end
    until false;

    t.Start();

    while progressScreen.IsOpen(100) do
      if t.GetTime() > 5000 then
        Exit(true);
  end

  result := true;
end

function TStatistics.GetXp(): integer
var
  dtm_smithing, x, y: integer;
  s: string;
begin
  result := -1;
  dtm_smithing := DTMFromString('mWAAAAHicY2FgYPjGBMHvgfgLEP8HirEyQug/QMzEyMS' +
    'gr60Jpu/fucMAAvwMDCg0OgAAZ74KHg==');

  with GetClientBounds() do
    if FindDtm(dtm_smithing, x, y, x1, y1, x2, y2) then begin
      s := TesseractGetText(x - 90, y - 5, x - 11, y + 12, FILTER_SMALL_CHARS);
      result := StrToIntDef(ExtractFromStr(s, numbers), -1);
    end

  FreeDtm(dtm_smithing);
end

function TStatistics.GetXpGained(): integer
begin
  result := self.GetXp() - self.xp_start;
end

function DepositArmourToChute(tries: integer = 5): boolean
var
  c: integer;
  t: TTimeMarker;
begin
  result := false;

  if tries = 0 then
    TerminateScript();

  if ignot^.CountInventory() > 0 then
    Exit();

  c := tabBackpack.Count();

  if not chute.Click(5, true) then
    Exit(DepositArmourToChute(tries - 1));

  t.start();

  repeat
    Wait(RandomRange(33, 66));

    if t.GetTime() > 2000 then
      Exit(DepositArmourToChute(tries - 1));
  until tabBackpack.Count() <> c;

  result := true;
end

function SmeltIgnots(tries: integer = 5): boolean
var
  t: TTimeMarker;
begin
  result := false;

  if tries = 0 then
    TerminateScript();

  if not productionScreen.IsOpen() then begin
    if ignot^.CountInventory() > 0 then
      Exit();

    if not smelter.Click(5, true) then
      Exit(SmeltIgnots(tries - 1));

    if not productionScreen.IsOpen(3000) then
      Exit(SmeltIgnots(tries - 1));
  end

  case ignot^.type_ of
    'Iron': if not productionScreen.SelectBox(ignot^.tier) then
      Exit(SmeltIgnots(tries - 1));

    else TerminateScript();
  end

  t.Start();

  repeat
    productionScreen.ClickStart(false);

    Wait(RandomRange(500, 1000));

    if t.GetTime() > 5000 then
      Exit(SmeltIgnots(tries - 1));
  until not productionScreen.IsOpen();

  result := true;
end

begin
  Initialize();

  repeat
    DepositArmourToChute();
    SmeltIgnots();
    SmithBurialArmour();
  until false;
end.
